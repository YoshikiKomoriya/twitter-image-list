/* tslint:disable */
/* eslint-disable */
/**
 * sample
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Hashtag,
    HashtagFromJSON,
    HashtagFromJSONTyped,
    HashtagToJSON,
    Media,
    MediaFromJSON,
    MediaFromJSONTyped,
    MediaToJSON,
    Poll,
    PollFromJSON,
    PollFromJSONTyped,
    PollToJSON,
    Symbol,
    SymbolFromJSON,
    SymbolFromJSONTyped,
    SymbolToJSON,
    Url,
    UrlFromJSON,
    UrlFromJSONTyped,
    UrlToJSON,
    UserMension,
    UserMensionFromJSON,
    UserMensionFromJSONTyped,
    UserMensionToJSON,
} from './';

/**
 * ユーザーが所有するエンティティ
 * @export
 * @interface Entities
 */
export interface Entities {
    /**
     * 
     * @type {Array<Hashtag>}
     * @memberof Entities
     */
    hashtags: Array<Hashtag>;
    /**
     * 
     * @type {Array<Symbol>}
     * @memberof Entities
     */
    symbols: Array<Symbol>;
    /**
     * 
     * @type {Array<UserMension>}
     * @memberof Entities
     */
    user_mentions?: Array<UserMension>;
    /**
     * 
     * @type {Array<Url>}
     * @memberof Entities
     */
    urls: Array<Url>;
    /**
     * 
     * @type {Array<Media>}
     * @memberof Entities
     */
    media?: Array<Media>;
    /**
     * 
     * @type {Array<Poll>}
     * @memberof Entities
     */
    polls?: Array<Poll>;
}

export function EntitiesFromJSON(json: any): Entities {
    return EntitiesFromJSONTyped(json, false);
}

export function EntitiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): Entities {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hashtags': ((json['hashtags'] as Array<any>).map(HashtagFromJSON)),
        'symbols': ((json['symbols'] as Array<any>).map(SymbolFromJSON)),
        'user_mentions': !exists(json, 'user_mentions') ? undefined : ((json['user_mentions'] as Array<any>).map(UserMensionFromJSON)),
        'urls': ((json['urls'] as Array<any>).map(UrlFromJSON)),
        'media': !exists(json, 'media') ? undefined : ((json['media'] as Array<any>).map(MediaFromJSON)),
        'polls': !exists(json, 'polls') ? undefined : ((json['polls'] as Array<any>).map(PollFromJSON)),
    };
}

export function EntitiesToJSON(value?: Entities | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hashtags': ((value.hashtags as Array<any>).map(HashtagToJSON)),
        'symbols': ((value.symbols as Array<any>).map(SymbolToJSON)),
        'user_mentions': value.user_mentions === undefined ? undefined : ((value.user_mentions as Array<any>).map(UserMensionToJSON)),
        'urls': ((value.urls as Array<any>).map(UrlToJSON)),
        'media': value.media === undefined ? undefined : ((value.media as Array<any>).map(MediaToJSON)),
        'polls': value.polls === undefined ? undefined : ((value.polls as Array<any>).map(PollToJSON)),
    };
}


