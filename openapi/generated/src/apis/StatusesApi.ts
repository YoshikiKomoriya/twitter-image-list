/* tslint:disable */
/* eslint-disable */
/**
 * sample
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Tweet,
    TweetFromJSON,
    TweetToJSON,
} from '../models';

export interface StatusesUserTimelineRequest {
    screen_name: string;
    count?: number;
    max_id?: string;
    tweet_mode?: string;
    include_rts?: boolean;
    include_ext_alt_text?: boolean;
}

/**
 * 
 */
export class StatusesApi extends runtime.BaseAPI {

    /**
     * ユーザーのタイムラインを取得する
     * ユーザーのタイムライン取得
     */
    async statusesUserTimelineRaw(requestParameters: StatusesUserTimelineRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Tweet>>> {
        if (requestParameters.screen_name === null || requestParameters.screen_name === undefined) {
            throw new runtime.RequiredError('screen_name','Required parameter requestParameters.screen_name was null or undefined when calling statusesUserTimeline.');
        }

        const queryParameters: any = {};

        if (requestParameters.screen_name !== undefined) {
            queryParameters['screen_name'] = requestParameters.screen_name;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.max_id !== undefined) {
            queryParameters['max_id'] = requestParameters.max_id;
        }

        if (requestParameters.tweet_mode !== undefined) {
            queryParameters['tweet_mode'] = requestParameters.tweet_mode;
        }

        if (requestParameters.include_rts !== undefined) {
            queryParameters['include_rts'] = requestParameters.include_rts;
        }

        if (requestParameters.include_ext_alt_text !== undefined) {
            queryParameters['include_ext_alt_text'] = requestParameters.include_ext_alt_text;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statuses/user_timeline`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TweetFromJSON));
    }

    /**
     * ユーザーのタイムラインを取得する
     * ユーザーのタイムライン取得
     */
    async statusesUserTimeline(requestParameters: StatusesUserTimelineRequest, initOverrides?: RequestInit): Promise<Array<Tweet>> {
        const response = await this.statusesUserTimelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
